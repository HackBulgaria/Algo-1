class Vector:

<<<<<<< HEAD
    # Adds value at a specific index in the Vector.
    # Complexity: O(n)
    def insert(index, value):
        pass

    # Adds value to the end of the Vector.
    # Complexity: O(1)
    def add(value):
        pass

    # Returns value at a specific index in the Vector
    # Complexity: O(1)
    def get(index):
        pass

    # Removes element at the specific index
    # Complexity: O(n)
    def remove(index):
        pass

    # Removes element at the last index
    # Complexity: O(1)
    def pop():
        pass

    # Returns the number of elements in the Vector.
    # Complexity: O(1)
    def size():
        pass

    # Returns the total capacity of the Vector.
    # Complexity: O(1)
    def capacity():
        pass
=======
    def __init__(self):
        self.myArray = [None] * 2

    def double(self):
        newList = [None] * Vector.capacity(self)
        self.myArray.extend(newList)

    def garbage_collector(self):
        print(len(self.myArray))

        for x in range(Vector.capacity(self) - 1, 2, -1):
            if self.myArray[x] == None:
                self.myArray.pop()
            else:
                break

    def insert(self, index, value):

        Vector.double(self)
        firstVector = self.myArray[:index]
        secondVector = self.myArray[index:]

        self.myArray = []

        self.myArray.extend(firstVector)
        self.myArray.append(value)
        self.myArray.extend(secondVector)

        Vector.garbage_collector(self)

    def add(self, value):
        insertAtPositon = (Vector.capacity(self) + 1)
        Vector.double(self)
        Vector.insert(self, insertAtPositon, value)
        print("Garbage:")
        Vector.garbage_collector(self)

    def get(self, index):
        return self.myArray[index]

    def capacity(self):
        return len(self.myArray)

b = Vector()
b.insert(0, "Ivan")
print(b.myArray)
b.insert(0, "Vitya1")
b.insert(2, "Vitya")
print(b.myArray)
>>>>>>> add vector
